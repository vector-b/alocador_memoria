.section .data	
	  topoHeap  : .quad 0
	  inicioHeap : .quad 0
	  str0	 : .string "In√≠cio da Heap: %ld topoHeap da Heap: %ld \n" 
	  str1	 : .string "topoHeap da Heap: %ld \n" 
	  str2	 : .string "Saida cursed: %ld \n"
			A: .long 0 
	.equ NOT_OK, 1 
	.equ OK, 0 

.section .text 
.globl iniciaAlocador, alocaMem, main

iniciaAlocador:
	pushq %rbp	
	movq %rsp, %rbp

	movq $12, %rax
	movq $0, %rdi
	syscall

	movq %rax, inicioHeap
	movq %rax, topoHeap

	popq %rbp
	ret
alocaMem:
	pushq %rbp
	movq %rsp, %rbp

	movq 16(%rbp), %rbx

	movq inicioHeap, %rcx
	movq topoHeap  , %rdx

	check:
		cmpq %rcx, %rdx
		je aloca

	compara:
		#movq 0(%rcx), %r12
		#movq 8(%rcx), %r13

		jmp saida
	
	aloca:
		movq (%rbx), %r10		#aux

		movq %r10, %r11
		addq  $16, %r11
		addq topoHeap, %r11

		movq $12,  %rax
		movq %r11, %rdi
		syscall

		movq %rax, %rdx
		subq %r10, %rdx
		subq $16,  %rdx

		movq   $0, (%rdx)
		addq   $8,  %rdx
		movq %r10, (%rdx)
		addq   $8,  %rdx

		movq %rdx, %rax	

	saida:
		popq %rbp
		ret


main:
	call iniciaAlocador

	#movq $24, A
	#pushq $A
	#call alocaMem

	movq $topoHeap, %rdi
	movq $60, %rax
	syscall
